plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'war'
}

group = 'parking.car'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// **기능**: 스프링 부트의 기본 스타터로, 스프링 프레임워크와 기본 설정을 포함합니다. 이는 스프링 부트 애플리케이션을 빠르게 시작할 수 있도록 도와줍니다.
	// **이유**: 스프링 부트 프로젝트의 기본적인 기능을 제공하며, 다른 스타터 의존성을 포함하기 위한 필수 구성 요소입니다.
	implementation 'org.springframework.boot:spring-boot-starter'
	
	// **기능**: 웹 애플리케이션 개발에 필요한 스프링 MVC와 임베디드 톰캣(서버), JSON 처리 등을 포함합니다.
	// **이유**: RESTful 웹 서비스와 웹 애플리케이션을 개발하기 위해 필요합니다.
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	// **기능**: 스프링 부트 애플리케이션 테스트에 필요한 JUnit, Mockito, Spring Test 등을 포함합니다.
	// **이유**: 단위 테스트 및 통합 테스트를 지원하기 위해 사용됩니다.
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	// **기능**: JUnit Platform을 통해 다양한 테스트 프레임워크를 실행할 수 있게 해줍니다.
	// **이유**: 테스트 실행을 지원하며, JUnit 5와 호환됩니다.
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// **기능**: 임베디드 톰캣 서버를 포함합니다.
	// **이유**: 스프링 부트 애플리케이션을 독립적으로 실행하기 위해 필요합니다.
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	//providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat' > 배포 시 변경
	
	// **기능**: JSP(JavaServer Pages) 지원을 위한 임베디드 톰캣 Jasper 컴파일러를 포함합니다.
	// **이유**: JSP를 사용한 웹 페이지 렌더링을 지원하기 위해 필요합니다.
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	
	// **기능**: Servlet API를 포함합니다.
	// **이유**: 서블릿을 작성하고 실행하기 위해 필요합니다.
	runtimeOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
	
	// **기능**: JSP API를 포함합니다.
	// **이유**: JSP 페이지를 작성하고 실행하기 위해 필요합니다.
	runtimeOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'
	
	// **기능**: JSP 표준 태그 라이브러리(JSTL) API를 포함합니다.
	// **이유**: JSP에서 표준 태그 라이브러리를 사용하기 위해 필요합니다.
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
	
	// **기능**: JSTL 구현체를 포함합니다.
	// **이유**: JSP에서 표준 태그 라이브러리를 사용할 수 있게 해줍니다.
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
	
	// **기능**: Jakarta EE의 표준 어노테이션을 포함합니다.
	// **이유**: 표준 어노테이션을 사용하기 위해 필요합니다.
	implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
	
	// **기능**: 개발용 도구로, 코드 변경 시 자동으로 애플리케이션을 재시작하는 기능 등을 포함합니다.
	// **이유**: 개발 생산성을 높이기 위해 사용됩니다.
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	// **기능**: Log4j2 로깅 프레임워크를 포함합니다.
	// **이유**: 애플리케이션 로깅을 지원하기 위해 필요합니다.
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	
	// **기능**: 보일러플레이트 코드를 줄이기 위한 어노테이션 프로세서입니다.
	// **이유**: Getter, Setter, ToString 등 코드를 자동 생성하기 위해 사용됩니다.
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	
	// **기능**: JDBC를 사용한 데이터베이스 접근을 지원합니다.
	// **이유**: 데이터베이스 연결 및 작업을 수행하기 위해 필요합니다.
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	
	// **기능**: Oracle 데이터베이스용 JDBC 드라이버를 포함합니다.
	// **이유**: Oracle 데이터베이스에 연결하기 위해 필요합니다.
	implementation 'com.oracle.database.jdbc:ojdbc11:23.3.0.23.09'
	
	// **기능**: 고성능 JDBC 커넥션 풀 라이브러리입니다.
	// **이유**: 데이터베이스 연결 풀링을 효율적으로 관리하기 위해 사용됩니다.
	implementation 'com.zaxxer:HikariCP:5.1.0'
	
	// **기능**: JDBC 호출을 로깅하는 라이브러리입니다.
	// **이유**: SQL 쿼리 및 데이터베이스 상호 작용을 로깅하기 위해 사용됩니다.
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	
	// **기능**: Jakarta Inject API는 의존성 주입(Dependency Injection)을 위한 표준 API를 제공합니다.
	// 주요 어노테이션 : @Inject: 필드, 메서드, 생성자에 의존성 주입 / @Named: 이름을 사용하여 의존성을 구별 / @Singleton: 클래스의 단일 인스턴스를 보장 / @Qualifier: 특정 의존성을 구분하기 위해 사용
	// **이유**
	// 표준화된 DI: 다양한 DI 프레임워크(CDI, Spring 등)와 호환되도록 표준화된 인터페이스를 제공합니다.
	// 프레임워크 간 호환성: Spring과 같은 프레임워크에서 Jakarta EE 기반의 다른 프레임워크와의 호환성을 높일 수 있습니다.
	// 유연한 코드 작성: DI 프레임워크에 종속되지 않는 유연한 코드를 작성할 수 있습니다. 이는 테스트 시 모킹(mocking)과 같은 작업을 쉽게 수행할 수 있게 합니다.
	// 간편한 DI 사용: 표준화된 DI 어노테이션을 사용함으로써, 의존성 주입 설정이 간편해지고, 코드의 일관성을 유지할 수 있습니다.
	implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
	
	// **기능**: JPA(Java Persistence API)를 사용한 데이터베이스 접근을 지원합니다.
	// **이유**: 데이터베이스와 상호작용하기 위해 JPA와 Hibernate를 사용합니다.
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
	// **기능**: Hibernate ORM(Object-Relational Mapping) 프레임워크의 핵심 라이브러리입니다.
	// **이유**: JPA 구현체로서 엔티티 관리 및 데이터베이스 작업을 처리하기 위해 사용됩니다.
	implementation 'org.hibernate:hibernate-core:6.1.5.Final'
	
	//섬네일을 쉽게 생성하며 다양한 이미지 형식을 지원하고 이미지 리사이징, 크롭, 회전 등의 기능을 제공한다.
	implementation 'net.coobird:thumbnailator:0.4.20'
}

tasks.named('test') {
	useJUnitPlatform()
}

eclipse {
	wtp {
		facet {
			facet name: 'jst.web', version: '6.0'
			facet name: 'java', version: '17'
		}
	}
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

apply plugin: 'java'

sourceSets {
	main {
		resources {
			exclude 'templates/**'
			exclude 'static/**'
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}